这是一个微信小程序需求文档，小程序提供刷题功能，功能模块如下：
1. 题库管理：
    - 题库分类：根据不同的考试科目，将题目进行分类，如数学、英语、物理等。
    - 题目管理：对题库中的题目进行管理，包括添加、编辑、删除等操作。
    - 题目导入：支持从Excel、Word等格式导入题目。
    - 题目导出：支持将题库中的题目导出为Excel、Word等格式。
2. 刷题功能：
    - 随机抽题：根据题库中的题目，随机抽取题目进行刷题。
    - 顺序刷题：根据题库中的题目，按照顺序进行刷题。
    - 错题本：记录用户做错的题目，方便用户进行复习。
    - 收藏题目：用户可以收藏题目，方便用户进行复习。

项目应该包含三个子项目，并分别具备以下详细功能：

1. 小程序前端
    - 用户注册与登录：支持微信授权登录、手机号登录等方式。
    - 题库浏览与筛选：根据科目、难度等条件筛选题目。
    - 刷题模式：支持顺序刷题、随机刷题、专项练习等多种模式。
    - 答题与解析：支持选择题、填空题等多种题型，答题后可查看解析。
    - 错题本与收藏夹：自动记录错题，支持题目收藏与管理。
    - 个人中心：查看做题记录、统计分析、积分排行等。
    - 消息通知：推送系统消息、活动通知等。

2. 小程序后台管理系统
    - 用户管理：查看、编辑、禁用用户账号等。
    - 题库管理：题目分类、题目增删改查、批量导入导出题目。
    - 题目导入：支持从Excel、Word等格式导入题目。
    - 题目导出：支持将题库中的题目导出为Excel、Word等格式。
    - 题目审核：对新增或修改的题目进行审核。
    - 题目审核：对新增或修改的题目进行审核。
    - 数据统计：用户活跃度、刷题量、错题率等数据报表。
    - 权限管理：不同管理员分配不同操作权限。
    - 系统设置：公告发布、活动配置等。

3. 小程序后端API
    - 用户认证与权限校验接口。
    - 题库数据接口：题目、分类、解析等数据的增删改查。
    - 刷题记录接口：保存与查询用户刷题、错题、收藏等记录。
    - 数据统计接口：提供前端和后台管理系统所需的统计数据。
    - 消息推送接口：支持系统消息、活动通知等推送。
    - 文件上传与下载接口：支持题目导入导出、图片上传等功能。

    // 技术栈设计（轻量，前后端一体）：

    1. 前端（小程序端）：
        - 微信小程序原生开发（WXML + WXSS + JavaScript）
        - 框架建议：Taro 或 uni-app（可选，便于多端扩展，但原生最轻量）
        - 状态管理：MobX（如需全局状态管理，可选）
        - UI组件库：Vant Weapp（轻量、易用）

    2. 后台管理系统（Web端）：
        - 框架：Vite + Vue3（Composition API，轻量高效）
        - UI组件库：Element Plus（后台管理常用，易上手）
        - 网络请求：Axios
        - 构建工具：Vite（极快的开发体验）

    3. 后端API（前后端一体）：
        - Node.js + Koa2（轻量高效，易于与小程序和Web端对接）
        - 数据库：SQLite（轻量级，适合中小型项目，易于部署和维护）
        - ORM：Sequelize（支持SQLite，开发效率高）
        - 文件存储：本地文件系统（如需云存储可扩展为阿里云OSS/腾讯云COS）
        - 鉴权：JWT（JSON Web Token，前后端分离常用）

    4. 部署与运维：
        - 一体化部署：后端API与后台管理系统可同一Node.js服务部署
        - 小程序端独立发布至微信小程序平台
        - 支持Docker容器化部署（可选）

    5. 说明：
        - 前后端一体，Node.js服务同时提供API和后台管理页面静态资源
        - 适合小团队、快速上线、易于维护和扩展
        - 可根据业务量后续升级数据库和存储方案
